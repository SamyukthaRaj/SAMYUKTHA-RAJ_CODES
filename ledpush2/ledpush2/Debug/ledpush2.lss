
ledpush2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000cc  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000120  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000120  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000150  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  0000018c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000005ef  00000000  00000000  000001ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000054c  00000000  00000000  0000079b  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000228  00000000  00000000  00000ce7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  00000f10  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000334  00000000  00000000  00000f34  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000088  00000000  00000000  00001268  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  000012f0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 64 00 	jmp	0xc8	; 0xc8 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:
#include <avr/io.h>


int main(void)
{
	DDRB |= 1<< PINB1;
  6c:	b9 9a       	sbi	0x17, 1	; 23
	PORTB^=1<<PINB1;
  6e:	98 b3       	in	r25, 0x18	; 24
  70:	82 e0       	ldi	r24, 0x02	; 2
  72:	89 27       	eor	r24, r25
  74:	88 bb       	out	0x18, r24	; 24
	DDRD &=~(1<<PIND7);
  76:	8f 98       	cbi	0x11, 7	; 17
	PORTD |=1<<PIND7;
  78:	97 9a       	sbi	0x12, 7	; 18
	int Pressed=0;
	int Pressed_Confidence_level=0;
	int Released_Confidence_level=0;
  7a:	40 e0       	ldi	r20, 0x00	; 0
  7c:	50 e0       	ldi	r21, 0x00	; 0
	DDRB |= 1<< PINB1;
	PORTB^=1<<PINB1;
	DDRD &=~(1<<PIND7);
	PORTD |=1<<PIND7;
	int Pressed=0;
	int Pressed_Confidence_level=0;
  7e:	80 e0       	ldi	r24, 0x00	; 0
  80:	90 e0       	ldi	r25, 0x00	; 0
{
	DDRB |= 1<< PINB1;
	PORTB^=1<<PINB1;
	DDRD &=~(1<<PIND7);
	PORTD |=1<<PIND7;
	int Pressed=0;
  82:	20 e0       	ldi	r18, 0x00	; 0
  84:	30 e0       	ldi	r19, 0x00	; 0
		else
		{
			Released_Confidence_level++;
			if(Released_Confidence_level>500)
			{
				Pressed=0;
  86:	a0 e0       	ldi	r26, 0x00	; 0
  88:	f0 e0       	ldi	r31, 0x00	; 0
			Pressed_Confidence_level++;
			if(Pressed_Confidence_level>500)
			{
				if(Pressed==0)
				{
					PORTB^=1<<PINB1;
  8a:	e2 e0       	ldi	r30, 0x02	; 2
					PORTD^=1<<PINB7;
					Pressed =1;
  8c:	71 e0       	ldi	r23, 0x01	; 1
  8e:	60 e0       	ldi	r22, 0x00	; 0
	
    /* Replace with your application code */
    while (1) 
    
	{
		if(bit_is_clear(PIND,7))
  90:	87 99       	sbic	0x10, 7	; 16
  92:	11 c0       	rjmp	.+34     	; 0xb6 <main+0x4a>
		{
			Pressed_Confidence_level++;
  94:	01 96       	adiw	r24, 0x01	; 1
			if(Pressed_Confidence_level>500)
  96:	85 3f       	cpi	r24, 0xF5	; 245
  98:	b1 e0       	ldi	r27, 0x01	; 1
  9a:	9b 07       	cpc	r25, r27
  9c:	cc f3       	brlt	.-14     	; 0x90 <main+0x24>
			{
				if(Pressed==0)
  9e:	21 15       	cp	r18, r1
  a0:	31 05       	cpc	r19, r1
  a2:	b1 f7       	brne	.-20     	; 0x90 <main+0x24>
				{
					PORTB^=1<<PINB1;
  a4:	28 b3       	in	r18, 0x18	; 24
  a6:	2e 27       	eor	r18, r30
  a8:	28 bb       	out	0x18, r18	; 24
					PORTD^=1<<PINB7;
  aa:	22 b3       	in	r18, 0x12	; 18
  ac:	20 58       	subi	r18, 0x80	; 128
  ae:	22 bb       	out	0x12, r18	; 18
					Pressed =1;
  b0:	27 2f       	mov	r18, r23
  b2:	36 2f       	mov	r19, r22
  b4:	ed cf       	rjmp	.-38     	; 0x90 <main+0x24>
				}
			}
		}
		else
		{
			Released_Confidence_level++;
  b6:	4f 5f       	subi	r20, 0xFF	; 255
  b8:	5f 4f       	sbci	r21, 0xFF	; 255
			if(Released_Confidence_level>500)
  ba:	45 3f       	cpi	r20, 0xF5	; 245
  bc:	b1 e0       	ldi	r27, 0x01	; 1
  be:	5b 07       	cpc	r21, r27
  c0:	3c f3       	brlt	.-50     	; 0x90 <main+0x24>
			{
				Pressed=0;
  c2:	2a 2f       	mov	r18, r26
  c4:	3f 2f       	mov	r19, r31
  c6:	e4 cf       	rjmp	.-56     	; 0x90 <main+0x24>

000000c8 <_exit>:
  c8:	f8 94       	cli

000000ca <__stop_program>:
  ca:	ff cf       	rjmp	.-2      	; 0xca <__stop_program>
