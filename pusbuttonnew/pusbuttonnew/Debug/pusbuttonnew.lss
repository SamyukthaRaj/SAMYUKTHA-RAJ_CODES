
pusbuttonnew.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000aa  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000000fe  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000000fe  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000130  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  0000016c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000005df  00000000  00000000  0000018c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000056a  00000000  00000000  0000076b  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000204  00000000  00000000  00000cd5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  00000edc  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000300  00000000  00000000  00000f00  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000054  00000000  00000000  00001200  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  00001254  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 53 00 	jmp	0xa6	; 0xa6 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:
#include <avr/io.h>


int main(void)
{
	DDRB |=1<<PINB1;
  6c:	b9 9a       	sbi	0x17, 1	; 23
	PORTB^=1<<PINB1;
  6e:	98 b3       	in	r25, 0x18	; 24
  70:	82 e0       	ldi	r24, 0x02	; 2
  72:	89 27       	eor	r24, r25
  74:	88 bb       	out	0x18, r24	; 24
	DDRD |=1<<PIND7;
  76:	8f 9a       	sbi	0x11, 7	; 17
	DDRD &=~(1<<PIND7);
  78:	8f 98       	cbi	0x11, 7	; 17
	PORTD|=1<<PIND7;
  7a:	97 9a       	sbi	0x12, 7	; 18
    /* Replace with your application code */
    while (1) 
    {
		if((((1<<PIND7)&PIND7)>>PIND7)==0)
		{
			cp++;
  7c:	81 e0       	ldi	r24, 0x01	; 1
  7e:	90 e0       	ldi	r25, 0x00	; 0
	DDRB |=1<<PINB1;
	PORTB^=1<<PINB1;
	DDRD |=1<<PIND7;
	DDRD &=~(1<<PIND7);
	PORTD|=1<<PIND7;
	int Pressed=0;
  80:	20 e0       	ldi	r18, 0x00	; 0
  82:	30 e0       	ldi	r19, 0x00	; 0
				
			
			if(Pressed==0)
			{ 
				Pressed=1;
			    PORTB^=1<<PINB1;
  84:	62 e0       	ldi	r22, 0x02	; 2
			{
				
			
			if(Pressed==0)
			{ 
				Pressed=1;
  86:	51 e0       	ldi	r21, 0x01	; 1
  88:	40 e0       	ldi	r20, 0x00	; 0
    /* Replace with your application code */
    while (1) 
    {
		if((((1<<PIND7)&PIND7)>>PIND7)==0)
		{
			cp++;
  8a:	01 96       	adiw	r24, 0x01	; 1
			if(cp>500)
  8c:	85 3f       	cpi	r24, 0xF5	; 245
  8e:	71 e0       	ldi	r23, 0x01	; 1
  90:	97 07       	cpc	r25, r23
  92:	dc f3       	brlt	.-10     	; 0x8a <main+0x1e>
			{
				
			
			if(Pressed==0)
  94:	21 15       	cp	r18, r1
  96:	31 05       	cpc	r19, r1
  98:	c1 f7       	brne	.-16     	; 0x8a <main+0x1e>
			{ 
				Pressed=1;
			    PORTB^=1<<PINB1;
  9a:	28 b3       	in	r18, 0x18	; 24
  9c:	26 27       	eor	r18, r22
  9e:	28 bb       	out	0x18, r18	; 24
			{
				
			
			if(Pressed==0)
			{ 
				Pressed=1;
  a0:	25 2f       	mov	r18, r21
  a2:	34 2f       	mov	r19, r20
  a4:	f2 cf       	rjmp	.-28     	; 0x8a <main+0x1e>

000000a6 <_exit>:
  a6:	f8 94       	cli

000000a8 <__stop_program>:
  a8:	ff cf       	rjmp	.-2      	; 0xa8 <__stop_program>
